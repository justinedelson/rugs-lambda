service: aem-rugs # NOTE: update this with your service name

provider:
  name: aws
  runtime: java8
  accountId: 233597854772
  versionFunctions: false
  role: defaultRole
  environment:
    RUG_BUCKET_NAME: ${self:custom.inputBucketName}
    RUG_OBJECT_KEY: "aem-rugs-0.2.2.zip"
    RUG_GROUP_ID: "aem-rugs"
    RUG_ARTIFACT_ID: "aem-rugs"
    RUG_VERSION: "0.2.2"

custom:
  outputBucketName: com-adobe-people-jedelson-aem-rugs-output
  inputBucketName: com-adobe-people-jedelson-aem-rugs-input

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can define service wide environment variables here


# you can add packaging information here
package:
  artifact: target/aem-rugs-lambda.jar

functions:
  rugs:
    handler: com.adobe.people.jedelson.rugsinlambda.RugsHandler
    timeout: 20
    events:
      - http:
          path: rugs
          method: get
          integration: lambda
          cors: true

  validate:
    handler: com.adobe.people.jedelson.rugsinlambda.ValidateHandler
    timeout: 20
    events:
      - http:
          path: "{generatorName}/validate"
          method: post
          integration: lambda
          cors: true
          request:
             parameters:
                paths:
                  generatorName: true
             template:
                application/json: ${file(serverless/body-with-generator.vm)}
          response:
             statusCodes:
                404:
                   pattern: '.*NoSuchGeneratorException.*'
                   template: ${file(serverless/error-cause.vm)}
                500:
                   pattern: '.*Exception.*'
                   template: ${file(serverless/error-cause.vm)}

  generate:
    handler: com.adobe.people.jedelson.rugsinlambda.GenerateHandler
    timeout: 90
    role: generateFunctionRole
    environment:
      BUCKET_NAME: ${self:custom.outputBucketName}
    events:
      - http:
          path: "{generatorName}/generate"
          method: post
          integration: lambda
          cors: true
          request:
             parameters:
                paths:
                  generatorName: true
             template:
                application/json: ${file(serverless/body-with-generator.vm)}
          response:
             statusCodes:
                404:
                   pattern: '.*NoSuchGeneratorException.*'
                   template: ${file(serverless/error-cause.vm)}
                500:
                   pattern: '.*Exception.*'
                   template: ${file(serverless/error-cause.vm)}

resources:
  Resources:
    outputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.outputBucketName}
        LifecycleConfiguration:
          Rules: [{ExpirationInDays: 1, Status: Enabled, Id: ExpireGeneratedProjects}]
    defaultRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-defaultLambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: generatePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${self:provider.region}:${self:provider.accountId}:log-group:/aws/lambda/*:*:*
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource: arn:aws:s3:::${self:custom.inputBucketName}/*
    generateFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-generateLambdaRole1
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: generatePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${self:provider.region}:${self:provider.accountId}:log-group:/aws/lambda/*:*:*
                - Effect: "Allow"
                  Action:
                     - "s3:GetObject"
                  Resource: arn:aws:s3:::${self:custom.inputBucketName}/*
                - Effect: "Allow"
                  Action:
                     - "s3:PutObject"
                     - "s3:GetObject"
                  Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "outputBucket"
                         - "/*"
